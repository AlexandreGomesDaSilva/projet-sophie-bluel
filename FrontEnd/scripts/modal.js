//*******************R√©√©CRIRE cette fonctionnalit√© de z√©ro, revoir tout ce que j'ai fait √† partir de checkif admin revoir la fa√ßon de g√©rer le mode √©dition, le mode admin et les modale, revoir la suppression des photos dans la premi√®re modale et pourquoi quand je supprime une photo je ne reste pas dans la modale, comme cela le faisias avnt que je poursuive sur la cr√©ation de la seconde modlae, ******************** */
let currentModal = null; // Variable globale pour stocker la modale ouverte, en fait elle permet de suivre l'etat de la modale et de savoir si elle est ouverte ou non, elle est definie sur null car elle n'a pas encore ete ouverte

// OUVERTURE DE LA MODALE
function openModal(e) {

  //console.group('üéØ Ouverture de la modale');
  //console.log('Event d√©clencheur :', e.type);
 // console.log('√©l√©ment cliqu√© :', e.target);
  e.preventDefault();

  // Je r√©cup√®re la modale et je l'affiche
  const modal = document.querySelector("#modal");
  modal.style.display = "flex";

  // Je mets √† jour les attributs ARIA
  modal.removeAttribute("aria-hidden"); // Je retire l'attribut aria-hidden du bouton de fermeture de la modale pour rendre la modale accessible
  modal.setAttribute("aria-modal", "true"); // Je met l'attribut aria-modal sur la modale pour rendre la modale accessible

  // Je garde une r√©f√©rence √† la modale ouverte
  currentModal = modal;

  // J'ajoute les √©couteurs d'√©v√©nements
  modal.addEventListener("click", closeModal);
  modal.querySelector(".close-modal").addEventListener("click", closeModal);
  modal
    .querySelector(".modale-wrapper")
    .addEventListener("click", stopPropagation);

  // Je charge les projets dans la modale
  loadWorksInModal();
}

// FERMETURE DE LA MODALE
function closeModal(e) {
  if (!currentModal) return; 

  e.preventDefault();
  e.stopPropagation(); 
  // Je cache la modale
  currentModal.style.display = "none";

  // Je mets √† jour les attributs ARIA
  currentModal.setAttribute("aria-hidden", "true"); // Je met l'attribut aria-hidden sur la modale pour rendre la modale accessible
  currentModal.removeAttribute("aria-modal"); // Je retire l'attribut aria-modal de la modale pour rendre la modale accessible

  // Je retire les √©couteurs d'√©v√©nements
  currentModal.removeEventListener("click", closeModal);
  currentModal
    .querySelector(".close-modal")
    .removeEventListener("click", closeModal);   //
  currentModal
    .querySelector(".modale-wrapper")
    .removeEventListener("click", stopPropagation);

  // Je r√©initialise la r√©f√©rence
  currentModal = null;
}

// EMP√äCHER LA FERMETURE QUAND ON CLIQUE DANS LA MODALE
function stopPropagation(e) {
  // Je passe en param√®tre l'√©v√©nement e, qui est l'√©v√©nement qui a √©t√© lanc√©, stop propagation me permet d'emp√™cher la propagation de l'√©v√©nement vers les √©l√©ments parent et donc de ne pas fermer la modale quand on clique dans la modale 'maintenant il faut que je stoppe la propagation de l'√©v√©nement'
  e.stopPropagation();
}

// CHARGEMENT DES PROJETS DANS LA MODALE,(galerie photos)

//***********Voir si je ne peux pas faire cela d'ifferement (et utiliser la fonction dans scriptGallery qui me permet de r√©cup√©r√© les works et de les afficher, ainsi cela evitera de dupliquer le code)
async function loadWorksInModal() {
  console.log("D√©but chargement des projets dans la modale");

  // Je r√©cup√®re le conteneur avec la bonne classe
  const modalGallery = document.querySelector(".gallery-container");

  try {
    // Je r√©cup√®re mes projets depuis l'API
    const works = await getWorksFromAPI(); //  getWorksFromAPI est dans api.js)
    console.log("J'ai r√©cup√©r√©", works.length, "projets");  //la console m'affiche le nombre total de travaux r√©cup√©r√©s 

    // Je vide le conteneur avant d'ajouter les nouveaux projets
    modalGallery.innerHTML = "";

    // Je parcours mes projets et je les ajoute √† la modale
    for (let i = 0; i < works.length; i++) {
      const work = works[i];

      // Je cr√©e un √©l√©ment figure pour chaque projet
      const figure = document.createElement("figure");
      figure.className = "modal-work";

      
      // J'ajoute l'image et le bouton de suppression
      figure.innerHTML = `
                <div class="work-image-container">
                    <img src="${work.imageUrl}" alt="${work.title}">
                    <button class="delete-work" data-id="${work.id}">
                        <i class="fa-solid fa-trash-can"></i>
                    </button>
                </div>   
            `; 

      // J'ajoute l'√©l√©ment figure √† mon conteneur (.gallery-container)
      modalGallery.appendChild(figure);
      const deleteButton = figure.querySelector(".delete-work");
      deleteButton.addEventListener("click", handleDeleteWork);
    }

    console.log("J'ai fini de charger la galerie dans la modale");
  } catch (error) {
    //je recupere l'erreur si il y en a une
    console.log("j'ai une erreur:", error);
    //gestion de l'erreur cot√© client//***tester si cela fonctionne correctment, et donner un style a ce message plus styl√© justemment **/
    modalGallery.innerHTML = "D√©sol√©, je n'arrive pas √† charger les projets"; 
  }
}
//****// pb de fermeture de la modale quand je supprime une photo,(la photo se supprime mais je suis direct rediriger hors de la modale et ce n'est pas ce que nous voulons, le stpProoagation n'a tj pas fonctionn√©, il semble que ce soit le fais que le backend et le frontend soit dans le m√™me repository et que j'utilise liverserver (en fait c'est logique ), et certains en les s√©parant ont r√©gler ce pb mais il y a certainement une autre fa√ßon en gerant mieux peut √™tre les √©v√©nements)

async function handleDeleteWork(e) {
  console.group('üóëÔ∏è SUPPRESION WORK - D√©but')
  console.log('1.Type √©v√©nement :', e.type);
console.log('2. √©l√©ment cliqu√© :', e.target);
console.log('3. √©l√©ment avec le listener :', e.currentTarget);
console.log('4. Work ID :', e.currentTarget.dataset.id);

  
  console.log('üéØD√©but HandledeleteWork');

     e.preventDefault();  
     e.stopPropagation();  // Arr√™te la propagation imm√©diate de l'√©v√©nement vers les √©l√©ments parent 

//r√©cup√©rer l'ID du projet √† supprimer
const workId = e.currentTarget.dataset.id;  // Je r√©cup√®re l'attribut data-id de l'√©l√©ment sur lequel l'√©v√©nement a ete attache (cf doc MDN sur dataset)(currentTarget : √©l√©ment sur lequel l'√©v√©nement a ete attache)(e.currentTarget.dataset.id : attribut data-id de l'√©l√©ment sur lequel l'√©v√©nement a √©t√© attach√©)

try {
    //appel l'API pour supprimer le work
    const success = await deleteWork(workId);

    if (success) {
      e.stopPropagation(); 
        //mettre a jour l'inteface de la modale sans la fermer
        await updateInterfaceAfterDeletion();
        console.log('Projet supprim√© avec succes');
        
        return false; //emp√™che la propagation suppl√©mentaire
    }
} catch (error) {
    console.error('Erreur lors de la suppression:', error);
    alert('Erreur lors de la suppression du projet');
}

}

//fonction qui met √† jour l interface de la modlale
async function updateInterfaceAfterDeletion() {
    try {
    await loadWorksInModal();

    // mise √† jour de la galerie dans la premi√®re vue de la modale
    const works = await getWorksFromAPI();  // je recupere la nouvelle liste des travaux depuis l'API
    if (Array.isArray(works)) {             //je verifie que works est un tableau
        addWorksGallery(works);             //je met a jour la galerie
        console.log("‚úÖinterface mise √† jour");       //affiche un message de confirmation

    } else {
        throw new error("Format de donn√©es invalide");
    }
} catch (error) {
    console.error("‚ùåErreur lors de la mise √† jour de l'interface:", error);
}
}


/****************R√©√©crire cette fonction pour ajouter les work********************************** */
// async function handleAddWork(e) {
//     //emp√™che le comportement par defaut et la propagation de l'√©v√©nement vers les √©l√©ments parent
//     e.preventDefault();
//     e.stopPropagation();

//     //r√©cup√©rer l'ID du projet √† supprimer
//     const workId = e.currentTarget.dataset.id;

//     try{
//         //appel a l'API pour suppriler le work
//         const success = await deleteWork(workId);  

//         if (success) {
//             await updateInterfaceAfterDeletion();
//             console.log("Projet supprim√© avec succ√®s");
//             e.stopPropagation();  
//             return false; //emp√™che la propagation suppl√©mentaire
//         }
//     }
// }















// AJOUT D'UN NOUVEAU PROJET (ici on appelle l'API et on recharge la galerie dans la modale en utilisant la fonction loadWorksInModal)
async function handleAddWork(e) {
  e.preventDefault();

  // On r√©cup√®re les donn√©es du formulaire (formData permet de r√©cuperer les donn√©es du formulaire o√π e.target est le formulaire qui a envoy√© les donn√©es)
  const formData = new FormData(e.target); // On utilise FormData pour pouvoir envoyer l'image cr√©e un objet FormData qui permet de stocker les donn√©es du formulaire (o√π e.target est le formulaire qui a envoy√© les donn√©es)

  try {
    // On appelle l'API pour ajouter le projet
    const newWork = await addWork(formData); // On appelle la fonction addWork avec les donn√©es du formulaire

    if (newWork) {
      // Si l'ajout r√©ussit, on recharge les galeries et on ferme la modale avec la fonction closeModal
      loadWorksInModal();
      initGallery();
      closeModal(e);
    }
  } catch (error) {
    console.error("Erreur lors de l'ajout:", error);
    alert("Erreur lors de l'ajout du projet");
  }
}

// Navigation entre les vues
function showAddPhotoView() {
  // Je cache la vue galerie et j'affiche la vue d'ajout photo
  const galleryView = document.getElementById("gallery-view");
  const addPhotoView = document.getElementById("add-photo-view");

  galleryView.style.display = "none"; // Je cache la vue galerie
  addPhotoView.style.display = "block"; // Je affiche la vue d'ajout photo
}

function showGalleryView() {
  // Je cache la vue d'ajout photo et j'affiche la vue galerie
  const galleryView = document.getElementById("gallery-view");
  const addPhotoView = document.getElementById("add-photo-view");

  addPhotoView.style.display = "none";
  galleryView.style.display = "block";
}

// Je v√©rifie si le formulaire est valide
function checkFormValidity() {
  // Je r√©cup√®re tous les √©l√©ments du formulaire
  const imageInput = document.getElementById("image-upload");
  const titleInput = document.getElementById("title");
  const categorySelect = document.getElementById("category");
  const validateButton = document.querySelector(".validate-btn");

  // Je v√©rifie si tous les champs sont remplis
  const isImageSelected = imageInput.files.length > 0;
  const isTitleFilled = titleInput.value.trim() !== "";
  const isCategorySelected = categorySelect.value !== "";

  // Si tout est rempli, j'active le bouton, sinon je le d√©sactive
  if (isImageSelected && isTitleFilled && isCategorySelected) {
    validateButton.disabled = false;
    validateButton.classList.add("active");
  } else {
    validateButton.disabled = true;
    validateButton.classList.remove("active");
  }
}

// Gestion de  l'ajout d'une photo
async function handlePhotoSubmit(event) {
  event.preventDefault();
  console.log('üéØ D√©but handlePhotoSubmit');

  try {
    const imageInput = document.getElementById("image-upload");
    const titleInput = document.getElementById("title");
    const categorySelect = document.getElementById("category");

    // V√©rification des champs
    if (!imageInput.files[0] || !titleInput.value || !categorySelect.value) {
      console.error('‚ùå Formulaire incomplet');
      alert("Veuillez remplir tous les champs");
      return;
    }

    const formData = new FormData();
    formData.append("image", imageInput.files[0]);
    formData.append("title", titleInput.value);
    formData.append("category", categorySelect.value);

    console.log('üì§ Envoi des donn√©es:', {
      image: imageInput.files[0].name,
      title: titleInput.value,
      category: categorySelect.value
    });

    const token = localStorage.getItem("token");
    if (!token) {
      console.error('‚ùå Token manquant');
      throw new Error("Token d'authentification manquant");
    }

    const response = await fetch(`${apiUrl}/works`, {
      method: "POST",
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: formData
    });

    console.log('üì° Status:', response.status);

    if (response.status === 201) {
      const data = await response.json();
      console.log('‚úÖ Succ√®s:', data);

      // Vider le formulaire
      const form = document.querySelector(".add-photo-form");
      if (form) {
        form.reset();
        console.log('üßπ Formulaire vid√©');
      }

      // Recharger les galeries
      try {
        await loadWorksInModal();
        await loadWorks();
        console.log('üîÑ Galeries recharg√©es');
      } catch (error) {
        console.error('‚ùå Erreur lors du rechargement des galeries:', error);
      }

      // Retour √† la vue galerie
      showGalleryView();
      console.log('üëÄ Retour √† la vue galerie');
      return;
    } else {
      const errorText = await response.text();
      throw new Error(`Erreur ${response.status}: ${errorText}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur compl√®te:', error);
    alert("Une erreur est survenue lors de l'ajout du projet");
  }
}

// charge les cat√©gories
async function loadCategories() {
  try {
    // Je r√©cup√®re les cat√©gories
    const response = await fetch(`${apiUrl}/categories`);
    const categories = await response.json();

    // Je r√©cup√®re le menu d√©roulant
    const categorySelect = document.getElementById("category");

    // Pour chaque cat√©gorie, je cr√©e une option dans le menu
    for (let i = 0; i < categories.length; i++) {
      const category = categories[i];

      const option = document.createElement("option");
      option.value = category.id;
      option.textContent = category.name;

      categorySelect.appendChild(option);
    }
  } catch (error) {
    console.error("Erreur lors du chargementes cat√©gories:", error);
  }
}
/****************V√©rifier l√† aussi si tout semble logique*************** */
// J'initialise tous les √©v√©nements de la modale
function initializeModalEvents() {
  // Je r√©cup√®re les boutons de navigation
  const addPhotoButton = document.querySelector(".add-photo-btn");
  const backButton = document.querySelector(".back-button");

  // J'ajoute les √©couteurs pour la navigation
  addPhotoButton.addEventListener("click", showAddPhotoView);
  backButton.addEventListener("click", showGalleryView);

  // Je r√©cup√®re le formulaire et ses champs
  const form = document.querySelector(".add-photo-form");
  const imageInput = document.getElementById("image-upload");
  const titleInput = document.getElementById("title");
  const categorySelect = document.getElementById("category");

  // J'ajoute les √©couteurs pour la validation
  imageInput.addEventListener("change", checkFormValidity);
  titleInput.addEventListener("input", checkFormValidity);
  categorySelect.addEventListener("change", checkFormValidity);

  // J'ajoute l'√©couteur pour la soumission du formulaire
  form.addEventListener("submit", handlePhotoSubmit);

  // Je charge les cat√©gories
  loadCategories();
}

// Quand la page est charg√©e et donc que le DOM est charg√©, j'initialise tout
document.addEventListener("DOMContentLoaded", function () {
  const modalBtn = document.querySelector(".edit-btn");
  if (modalBtn) modalBtn.addEventListener("click", openModal);

  initializeModalEvents();
});
