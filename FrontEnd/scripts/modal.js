import { getWorksFromAPI, deleteWork, addWork, apiUrl } from './api.js';
import { initGallery, addWorksGallery } from './scriptsGallery.js';

let currentModal = null; // Variable globale pour stocker la modale ouverte, en fait elle permet de suivre l'etat de la modale et de savoir si elle est ouverte ou non, elle est definie sur null car elle n'a pas encore ete ouverte

// OUVERTURE DE LA MODALE
export function openModal(e) {
  e.preventDefault();

  //  r√©cup√®ration la modale et affichage
  const modal = document.querySelector('#modal');
  modal.style.display = 'flex';

  //  met √† jour les attributs ARIA
  modal.removeAttribute('aria-hidden');
  modal.setAttribute('aria-modal', 'true');

  // garde une r√©f√©rence √† la modale ouverte
  currentModal = modal;

  // ajoute les √©couteurs d'√©v√©nements
  //modal.addEventListener('click', closeModal);
  modal.querySelector('.close-modal').addEventListener('click', closeModal);
  modal
    .querySelector('.modale-wrapper')
    .addEventListener('click', preventModalClose);

  //Charge les projets dans la modale
  loadWorksInModal();
}

// FERMETURE DE LA MODALE
function closeModal(e) {
  if (!currentModal) return;

  e.preventDefault();
  e.stopPropagation();

  // cache la modale
  currentModal.style.display = 'none';

  // met √† jour les attributs ARIA
  currentModal.setAttribute('aria-hidden', 'true');
  currentModal.removeAttribute('aria-modal');

  // retire les √©couteurs d'√©v√©nements
  currentModal.removeEventListener('click', closeModal);

  //Retire les √©couteurs sur tous les boutons de fermeture
  const closeButtons = document.querySelectorAll('.close-modal');
  for (const button of closeButtons) {
    button.removeEventListener('click', closeModal);
  }

  const modalWrappers = currentModal.querySelectorAll('.modale-wrapper');
  for (const wrapper of modalWrappers) {
    wrapper.removeEventListener('click', preventModalClose);
  }

  //r√©initialise la r√©f√©rence
  currentModal = null;
}

// EMP√äCHER LA FERMETURE QUAND ON CLIQUE DANS LA MODALE
function preventModalClose(e) {
  e.stopPropagation();
}
// CHARGEMENT DES PROJETS DANS LA MODALE,(galerie photo)
async function loadWorksInModal() {
  console.log('D√©but chargement des projets dans la modale');

  // R√©cup√®re le conteneur avec la bonne classe
  const modalGallery = document.querySelector('.gallery-container');

  try {
    // R√©cup√®re mes projets depuis l'API (appel fetch a l'api)
    const works = await getWorksFromAPI();
    console.log("J'ai r√©cup√©r√©", works.length, 'projets');

    //  Vide le conteneur avant d'ajouter les nouveaux projets
    modalGallery.innerHTML = '';

    // Parcours mes projets et je les ajoute √† la modale
    for (let i = 0; i < works.length; i++) {
      const work = works[i];
      //  cr√©e un √©l√©ment figure pour chaque projet
      const figure = document.createElement('figure');
      figure.className = 'modal-work';
      // ajoute l'image et le bouton de suppression
      figure.innerHTML = `
                <div class='work-image-container'>
                    <img src='${work.imageUrl}' alt='${work.title}'>
                    <button class='delete-work' data-id='${work.id}'>
                        <i class='fa-solid fa-trash-can'></i>
                    </button>
                </div>   
            `;

      // Ajoute l'√©l√©ment figure √† mon conteneur (.gallery-container)
      modalGallery.appendChild(figure);
      const deleteButton = figure.querySelector('.delete-work');
      deleteButton.addEventListener('click', handleDeleteWork);
    }

    console.log('J\'ai fini de charger la galerie dans la modale');
  } catch (error) {
    console.log('j\'ai une erreur:', error);
    //Gestion de l'erreur cot√© client
    modalGallery.innerHTML = 'D√©sol√©, je n\'arrive pas √† charger les projets';
  }
}

// SUPPRESSION D'UN PROJET
async function handleDeleteWork(e) {
  console.group('üóëÔ∏è SUPPRESION WORK - D√©but');
  console.log('1.Type √©v√©nement :', e.type);
  console.log('2. √©l√©ment cliqu√© :', e.target);
  console.log('3. √©l√©ment avec le listener :', e.currentTarget);
  console.log('4. Work ID :', e.currentTarget.dataset.id);
  console.log('üéØD√©but HandledeleteWork');

  e.preventDefault();
  e.stopPropagation();

  //R√©cup√©rer l'ID du projet √† supprimer
  const workId = e.currentTarget.dataset.id;

  try {
    //Appel l'API pour supprimer le work
    const success = await deleteWork(workId);

    if (success) {
      e.stopPropagation();
      //Met a jour l'inteface de la modale sans la fermer
      await updateInterfaceAfterDeletion();
      console.log('Projet supprim√© avec succes');

      e.stopImmediatePropagation(); //emp√™che la propagation suppl√©mentaire(garanti que la modale ne se ferme pas, plus puissant que stopPropagation())
      return false; //emp√™che la propagation suppl√©mentaire
    }
  } catch (error) {
    console.error('Erreur lors de la suppression:', error);
    alert('Erreur lors de la suppression du projet');
  }
}

//fonction qui met √† jour l interface de la modlale
async function updateInterfaceAfterDeletion() {
  try {
    await loadWorksInModal();

    // mise √† jour de la galerie dans la premi√®re vue de la modale
    const works = await getWorksFromAPI();
    if (Array.isArray(works)) {
      addWorksGallery(works);
    } else {
      throw new Error('Format de donn√©es invalide');
    }
  } catch (error) {
    console.error('‚ùåErreur lors de la mise √† jour de l\'interface:', error);
  }
}

// AJOUT D'UN NOUVEAU PROJET
async function handleAddWork(e) {
  e.preventDefault();

  // r√©cup√®re les donn√©es du formulaire (formData permet de r√©cuperer les donn√©es du formulaire o√π e.target est le formulaire qui a envoy√© les donn√©es)
  const formData = new FormData(e.target); // On utilise FormData pour pouvoir envoyer l'image cr√©e un objet FormData qui permet de stocker les donn√©es du formulaire (o√π e.target est le formulaire qui a envoy√© les donn√©es)

  try {
    // appelle l'API pour ajouter le projet
    const newWork = await addWork(formData);

    if (newWork) {
      loadWorksInModal();
      initGallery();
      closeModal(e);
    }
  } catch (error) {
    console.error("Erreur lors de l'ajout:", error);
    alert("Erreur lors de l'ajout du projet");
  }
}

// NAVIGATION ENTRE LES VUES DE LA MODALE
function showAddPhotoView() {
  // Cache la vue galerie et affiche la vue d'ajout photo
  const galleryView = document.getElementById('gallery-view');
  const addPhotoView = document.getElementById('add-photo-view');

  galleryView.style.display = 'none';
  addPhotoView.style.display = 'block';
}

function showGalleryView() {
  const galleryView = document.getElementById('gallery-view');
  const addPhotoView = document.getElementById('add-photo-view');

  addPhotoView.style.display = 'none';
  galleryView.style.display = 'block';
}

// VERIFICATION DE LA VALIDITE DU FORMULAIRE
function checkFormValidity() {
  // R√©cup√©ration des √©l√©ments
  const imageInput = document.getElementById('image-upload');
  const titleInput = document.getElementById('title');
  const categorySelect = document.getElementById('category');
  const validateButton = document.querySelector('.validate-btn');

  // V√©rification de l'existence des √©l√©ments
  if (!imageInput || !titleInput || !categorySelect || !validateButton) {
    console.error('‚ùå Elements du formulaire manquants');
    return;
  }

  // V√©rification des valeurs
  const isImageSelected = imageInput.files && imageInput.files.length > 0;
  const isTitleFilled = titleInput.value && titleInput.value.trim() !== '';
  const isCategorySelected =
    categorySelect.value && categorySelect.value !== '';

  console.log('üìù √âtat du formulaire :');
  console.log('- Image:', isImageSelected);
  console.log('- Titre:', isTitleFilled);
  console.log('- Cat√©gorie:', isCategorySelected);

  // Le bouton est activ√© UNIQUEMENT si les trois conditions sont remplies
  if (isImageSelected && isTitleFilled && isCategorySelected) {
    console.log('‚úÖ Formulaire valide - Activation du bouton');
    validateButton.disabled = false;
    validateButton.classList.add('active');
  } else {
    console.log('‚ùå Formulaire incomplet - D√©sactivation du bouton');
    validateButton.disabled = true;
    validateButton.classList.remove('active');
  }
}

// GESTION DE L'AJOUT DE PHOTO
async function handlePhotoSubmit(event) {
  event.preventDefault();
  console.log('üéØ D√©but handlePhotoSubmit');

  try {
    const imageInput = document.getElementById('image-upload');
    const titleInput = document.getElementById('title');
    const categorySelect = document.getElementById('category');

    // V√©rification des champs
    if (!imageInput.files[0] || !titleInput.value || !categorySelect.value) {
      console.error('‚ùå Formulaire incomplet');
      alert('Veuillez remplir tous les champs');
      return;
    }

    const formData = new FormData();
    formData.append('image', imageInput.files[0]);
    formData.append('title', titleInput.value);
    formData.append('category', categorySelect.value);

    console.log('üì§ Envoi des donn√©es:', {
      image: imageInput.files[0].name,
      title: titleInput.value,
      category: categorySelect.value,
    });

    const token = localStorage.getItem('token');
    if (!token) {
      console.error('‚ùå Token manquant');
      throw new Error('Token d\'authentification manquant');
    }

    const response = await fetch(`${apiUrl}/works`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    console.log('üì° Status:', response.status);

    if (response.status === 201) {
      const data = await response.json();
      console.log('‚úÖ Succ√®s:', data);

      // Vider le formulaire
      const form = document.querySelector('.add-photo-form');
      if (form) {
        form.reset();
        console.log('üßπ Formulaire vid√©');
      }

      // Recharger les galeries
      try {
        await loadWorksInModal();
        // await loadWorks();
        console.log('üîÑ Galeries recharg√©es');
      } catch (error) {
        console.error('‚ùå Erreur lors du rechargement des galeries:', error);
      }

      // Retour √† la vue galerie
      showGalleryView();
      console.log(' Retour √† la vue galerie');
      return;
    } else {
      const errorText = await response.text();
      throw new Error(`Erreur ${response.status}: ${errorText}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur compl√®te:', error);
    alert('Une erreur est survenue lors de l\'ajout du projet');
  }
}

// CHARGER LES CATEGORIES DANS LE MENU DEROULANT
async function loadCategories() {
  try {
    // R√©cup√®re les cat√©gories
    const response = await fetch(`${apiUrl}/categories`);
    const categories = await response.json();

    // R√©cup√®re le menu d√©roulant
    const categorySelect = document.getElementById('category');

    // Pour chaque cat√©gorie, cr√©e une option dans le menu
    for (let i = 0; i < categories.length; i++) {
      const category = categories[i];

      const option = document.createElement('option');
      option.value = category.id;
      option.textContent = category.name;

      categorySelect.appendChild(option);
    }
  } catch (error) {
    console.error('Erreur lors du chargementes cat√©gories:', error);
  }
}

// PR√âVISUALISATION DE L'IMAGE UPLOAD√âE
function handleImagePreview(event) {
  console.log('üéØ D√©but handleImagePreview');

  // r√©cup√®re le fichier s√©lectionner
  const file = event.target.files[0];
  console.log('fichier s√©lectionner :', file?.name);

  //trouve le container o√π afficher l'image
  const container = document.querySelector('.image-upload-container');

  //v√©rfications que le fichier est une image
  if (!file.type.match('image.*')) {
    alert('Veuillez choisir une image');
    return;
  }

  //cr√©er l'Url de l'image
  const imageUrl = URL.createObjectURL(file);

  //cacher les √©l√©ments pr√©sent dans le conteneur avant de charger l'image
  const existingElements = container.querySelectorAll(
    '.fa-regular, .custom-file-upload, .file-info'
  );
  for (const element of existingElements) {
    element.style.display = 'none';
  }
  //afficher l'image
  const imagePreview = document.createElement('img');
  imagePreview.className = 'image-preview';
  imagePreview.src = imageUrl;
  imagePreview.alt = file.name;
  container.appendChild(imagePreview);
}

//INITIALISATION DES EVENEMENTS DE LA MODALE
function initializeModalEvents() {
  console.log('Initialisation des √©v√©nements de la modale');

  //r√©cup√®re les √©l√©ments
  const form = document.querySelector('.add-photo-form');
  const imageInput = document.getElementById('image-upload');
  console.log('Input image trouv√© :', !!imageInput);
  const titleInput = document.getElementById('title');
  const categorySelect = document.getElementById('category');
  const addPhotoButton = document.querySelector('.add-photo-btn');
  const backButton = document.querySelector('.back-button');

  //GESTION DE L'AJOOUT DE PHOTO
  if (imageInput && titleInput && categorySelect) {
    console.log('‚úÖ √âl√©ments du formulaire trouv√©s');

    //pr√©visualisation et validation de l'image
    imageInput.addEventListener('change', (e) => {
      handleImagePreview(e);
      checkFormValidity();
    });

    //validation du titre
    titleInput.addEventListener('input', () => {
      checkFormValidity();
    });

    //validation de la cat√©gorie
    categorySelect.addEventListener('change', () => {
      checkFormValidity();
    });
  } else {
    console.error('‚ùå Certains √©l√©ments du formulaire sont manquants');
  }

  //navigation entre les vues de la modale
  if (addPhotoButton) {
    addPhotoButton.addEventListener('click', () => {
      showAddPhotoView();
    });
  }

  if (backButton) {
    backButton.addEventListener('click', showGalleryView);
  }

  //gestion de la fermeture
  const closeButtons = document.querySelectorAll('.close-modal');
  for (const button of closeButtons) {
    if (button) {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        closeModal(e);
      });
    }
  }

  //pr√©vention de la fermeture accidentelle de la modale
  const modalWrappers = document.querySelectorAll('.modale-wrapper');
  for (const wrapper of modalWrappers) {
    wrapper.addEventListener('click', preventModalClose);
  }

  //soumission du formulaire
  if (form) {
    form.addEventListener('submit', handlePhotoSubmit);
  }

  loadCategories();
}

//r√©initialisation du formulaire d'ajout de photo
function resetAddPhotoForm() {
  console.log('R√©nitialisation du formaulaire');

  const form = document.querySelector('.add-photo-form');
  const imagePreview = document.querySelector('.image-upload-container img');
  const validateButton = document.querySelector('.validate-btn');

  if (form) {
    form.reset();
    console.log('üßπ Formulaire r√©nitialis√©');
  }

  if (imagePreview) {
    imagePreview.remove();
    console.log('üßπ Image preview supprim√©e');
  }

  //R√©affiche les √©l√©ments cach√©s
  const hiddenElements = document.querySelectorAll(
    '.fa-regular, .custom-file-upload, .file-info'
  );
  for (const element of hiddenElements) {
    element.style.display = ''; //renitialise la valeur par d√©faut
  }

  if (validateButton) {
    validateButton.disabled = true;
    validateButton.classList.remove('active');
    console.log('üßπ Bouton de validation desactiv√©');
  }
}

//  initialisation de la modale et des √©v√©nements apr√®s que le DOM soit charg√©
document.addEventListener('DOMContentLoaded', function () {
  const modalBtn = document.querySelector('.edit-btn');
  if (modalBtn) modalBtn.addEventListener('click', openModal);

  initializeModalEvents();
});
